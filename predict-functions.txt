preda <- function(x,k)	{
	n <- length(x) 
	k2 <- k/2
	pred <- vector(length=n-k)
	for (i in 1:(n-k))	{
		if (sum(x[i:(i+(k-1))])>=k2)pred[i]<-1 else pred[i]<-0
				}
	return(mean(abs(pred-x[(k+1):n])))
			}

predb <- function(x,k) {
	n <- length(x)
	k2 <-k/2
	pred <- vector(length = n-k)
	sm <-sum(x[1:k])
	if (sm>=k2) pred[1]<-1 else pred[1]<-0
	if (n-k >= 2)		{
		for ( i in 2:(n-k)) 	{
			sm <- sm+x[i+k-1]-x[i-1]
			if (sm >=k2) pred[i] <-1 else pred[i] <- 0
					}
				}
	return(mean(abs(pred-x[(k+1):n])))
			}

predc <- function(x,k) {
	n <- length(x)
	k2 <- k/2
	pred <- vector(length = n-k)
	csx <- c(0,cumsum(x))
	for (i in 1:(n-k)) 	{
		if (csx[i+k]-csx[i] >= k2) pred[i] <- 1 else pred[i] <- 0
				}
	return(mean(abs(pred-x[(k+1):n])))
			}

# findud() converts vector v to 1s, 0s, representing an element
# increasing or not, relative to the previous one; output length is 1
# less than input
findud <- function(v) {
	vud <- v[-1] - v[-length(v)]
	return(ifelse(vud > 0,1,-1))
 			}

 udcorr <- function(x,y) {
 	ud <- lapply(list(x,y),findud)
	return(mean(ud[[1]] == ud[[2]]))
 			}


udcorr1 <- function(x,y) mean(sign(diff(x)) == sign(diff(y)))
